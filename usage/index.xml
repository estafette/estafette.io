<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Usage on Estafette CI/CD</title><link>https://estafette.io/usage/</link><description>Recent content in Usage on Estafette CI/CD</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://estafette.io/usage/index.xml" rel="self" type="application/rss+xml"/><item><title>Manifest</title><link>https://estafette.io/usage/manifest/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://estafette.io/usage/manifest/</guid><description>Estafette CI is manifest-controlled. That means each build and stage is controlled via the manifest. No more fiddling in a GUI to set up a pipeline.
Labels Your manifest usually starts with a set of labels; these labels are useful to quickly filter pipelines in the GUI or api, but it also helps for reusing the same application name in your build or release steps.
In the manifest labels can be specified within the labels section; you have full freedom to come up with additional keys for your labels:</description></item><item><title>Best practices</title><link>https://estafette.io/usage/best-practices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://estafette.io/usage/best-practices/</guid><description>Pin image versions In order to keep your builds reproducible, even if you haven&amp;rsquo;t touched them for a year it&amp;rsquo;s best to pin the stage image versions as narrow as possible. This will ensure you&amp;rsquo;re not wasting a day figuring out why your build is suddenly broken, when it turns out it&amp;rsquo;s the latest image tag of one of the used images is actually a different image now.
DON&#39;T:</description></item><item><title>Examples</title><link>https://estafette.io/usage/examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://estafette.io/usage/examples/</guid><description>golang labels: app: my-application language: golang stages: build: image: golang:1.11.2-alpine3.8 workDir: /go/src/github.com/estafette/${ESTAFETTE_LABEL_APP} env: CGO_ENABLED: 0 GOOS: linux commands: - go test `go list ./... | grep -v /vendor/` - CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags &amp;#34;-X main.version=${ESTAFETTE_BUILD_VERSION} -X main.revision=${ESTAFETTE_GIT_REVISION} -X main.branch=${ESTAFETTE_GIT_BRANCH} -X main.buildDate=${ESTAFETTE_BUILD_DATETIME}&amp;#34; -o ./publish/${ESTAFETTE_LABEL_APP} . csharp .net core labels: app: my-application language: dotnet-core stages: restore: image: microsoft/dotnet:2.1-sdk commands: - dotnet restore --source https://www.nuget.org/api/v1 --source http://nuget-server.tooling/nuget --packages .</description></item></channel></rss>