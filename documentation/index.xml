<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation on Estafette CI/CD</title>
    <link>https://estafette.io/documentation/</link>
    <description>Recent content in Documentation on Estafette CI/CD</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Jun 2018 15:35:46 +0200</lastBuildDate>
    
	<atom:link href="https://estafette.io/documentation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installation</title>
      <link>https://estafette.io/documentation/installation/</link>
      <pubDate>Tue, 19 Jun 2018 12:51:31 +0200</pubDate>
      
      <guid>https://estafette.io/documentation/installation/</guid>
      <description>Installing Estafette CI Prerequisites:
 install https://github.com/estafette/estafette-cloudflare-dns install https://github.com/estafette/estafette-letsencrypt-certificate install https://github.com/estafette/k8s-cockroachdb  Configure cluster roles and binding:
curl https://raw.githubusercontent.com/estafette/estafette-ci-api/master/rbac.yaml -o rbac.yaml export NAMESPACE=estafette export APP_NAME=estafette-ci-api kubectl apply -f rbac.yaml  Install the API:
curl https://raw.githubusercontent.com/estafette/estafette-ci-api/master/kubernetes.yaml -o kubernetes.yaml export NAMESPACE=estafette export APP_NAME=estafette-ci-api export TEAM_NAME=tooling-team export HOSTNAMES=ci.estafette.io export CLOUDFLARE_IP_RANGES=103.21.244.0/22, 103.22.200.0/22, 103.31.4.0/22, 104.16.0.0/12, 108.162.192.0/18, 131.0.72.0/22, 141.101.64.0/18, 162.158.0.0/15, 172.64.0.0/13, 173.245.48.0/20, 188.114.96.0/20, 190.93.240.0/20, 197.234.240.0/22, 198.41.128.0/17 export GITHUB_APP_PRIVATE_KEY= export VERSION=123456 export GO_PIPELINE_LABEL=latest export CPU_REQUEST=10m export MEMORY_REQUEST=15Mi export CPU_LIMIT=200m export MEMORY_LIMIT=512Mi export GITHUB_APP_ID=1234 export GITHUB_APP_OAUTH_CLIENT_ID=ab3.</description>
    </item>
    
    <item>
      <title>Usage</title>
      <link>https://estafette.io/documentation/usage/</link>
      <pubDate>Tue, 19 Jun 2018 12:51:45 +0200</pubDate>
      
      <guid>https://estafette.io/documentation/usage/</guid>
      <description>Usage in your application To build your application with Estafette add an .estafette.yaml file to your application repository.
# these labels turn into ESTAFETTE_LABEL_... envvars, automatically injected into all pipeline stepslabels:app:estafette-ci-builderteam:estafette-teamlanguage:golang# semver version generates a 0.0.x version (or 0.0.x-&amp;lt;branch&amp;gt; for other branches than the release branch)# made available as ESTAFETTE_BUILD_VERSION envvar, automatically injected into all pipeline stepsversion:semver:major:0minor:0patch:&amp;#39;{{auto}}&amp;#39;labelTemplate:&amp;#39;{{branch}}&amp;#39;releaseBranch:master# global environments variables that are automatically injected into all pipeline steps and can be# overridden by defining an envvar in a pipeline step with the same nameenv:VAR1:somevalueVAR2:anothervalue# pipeline steps are executed sequentially;# a step uses a public container to mount the working directory into and execute commands in;# extensions are containerized applications that execute based on injected environment variables or# custom properties injected as ESTAFETTE_EXTENSION_&amp;lt;PROPERTY&amp;gt; envvars# executing or skipping a step is controlled by the &amp;#39;when&amp;#39; propertypipelines:set-pending-build-status:image:extensions/github-status:stablestatus:pendingbuild:image:golang:1.</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>https://estafette.io/documentation/architecture/</link>
      <pubDate>Tue, 19 Jun 2018 12:51:51 +0200</pubDate>
      
      <guid>https://estafette.io/documentation/architecture/</guid>
      <description>The goals of Estafette CI are to&amp;hellip;
 control builds and deployments from one concise manifest file. move control over build dependencies to the manifest file. control builds and deployments via cli, slack and web interface. give insight into build times, deployment times, failure rates and more. allow development teams to build their own extensions. support many concurrent builds by leveraging kubernetes jobs. provide resilience against failure during job execution. dogfood its own components by providing different tracks for each (dev, beta, stable/latest).</description>
    </item>
    
  </channel>
</rss>