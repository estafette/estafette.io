<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design on Estafette CI/CD</title><link>https://estafette.io/design/</link><description>Recent content in Design on Estafette CI/CD</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://estafette.io/design/index.xml" rel="self" type="application/rss+xml"/><item><title>Basics</title><link>https://estafette.io/design/basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://estafette.io/design/basics/</guid><description>Estafette CI leverages Kubernetes as a platform to run concurrent build jobs without being restricted by a set of pre-launched agents. This means it can run hundreds of builds or releases in parallel.
To actually execute build and release actions it takes a pipeline-as-code approach by defining stages in an .estafette.yaml manifest file stored in an application's Git repository. These stages use (public) Docker container images to mount a shared working copy of your applications cloned repository into.</description></item><item><title>Goals</title><link>https://estafette.io/design/goals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://estafette.io/design/goals/</guid><description>The goals of Estafette are to&amp;hellip;
control builds and deployments from one concise manifest file. move control over build dependencies to the manifest file. control builds and deployments via cli, slack and web interface. give insight into build times, deployment times, failure rates and more. allow development teams to build their own extensions. support many concurrent builds by leveraging kubernetes jobs. provide resilience against failure during job execution. dogfood its own components by providing different tracks for each (dev, beta, stable/latest).</description></item><item><title>Architecture</title><link>https://estafette.io/design/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://estafette.io/design/architecture/</guid><description>The high-level architecture of Estafette CI looks as follows:
Components API In Estafette CI the api layer is at the heart of the system. It receives events from integrations from the build and release jobs and some other components. The API itself is stateless and runs multiple pods for high availability. It can be upgraded without downtime.
Web The web frontend is a single page application written in VueJS interfacing with the API for it's content.</description></item></channel></rss>